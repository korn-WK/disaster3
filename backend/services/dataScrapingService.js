const axios = require('axios');
const DisasterReport = require('../models/DisasterReport');
const { upsertDisasterReportsToVectorStore } = require('./vectorStoreService');

// Google News RSS Feed - ‡πÄ‡∏ô‡πâ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå
async function searchGoogleNewsRSS(query) {
  try {
    const encodedQuery = encodeURIComponent(query);
    const url = `https://news.google.com/rss/search?q=${encodedQuery}&hl=th&gl=TH&ceid=TH:th`;
    
    const response = await axios.get(url, {
      timeout: 10000, 
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
      }
    });
    
    const text = response.data;
    const articles = [];
    
    const titleMatches = text.match(/<title>(.*?)<\/title>/g);
    const linkMatches = text.match(/<link>(.*?)<\/link>/g);
    const pubDateMatches = text.match(/<pubDate>(.*?)<\/pubDate>/g);
    
    if (titleMatches && linkMatches) {
      for (let i = 1; i < Math.min(titleMatches.length, 20); i++) { // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô 8 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        const title = titleMatches[i].replace(/<\/?title>/g, '').trim();
        const link = linkMatches[i].replace(/<\/?link>/g, '').trim();
        const pubDate = pubDateMatches ? pubDateMatches[i]?.replace(/<\/?pubDate>/g, '').trim() : new Date().toISOString();
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°‡πÉ‡∏ô‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const isEmergencyReport = (
          title.toLowerCase().includes('‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°') && 
          title.toLowerCase().includes('‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢') &&
          (
            title.toLowerCase().includes('‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏') ||
            title.toLowerCase().includes('‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô') ||
            title.toLowerCase().includes('‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå') ||
            title.toLowerCase().includes('‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®') ||
            title.toLowerCase().includes('‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏†‡∏±‡∏¢') ||
            title.toLowerCase().includes('‡∏≠‡∏û‡∏¢‡∏û') ||
            title.toLowerCase().includes('‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠') ||
            title.toLowerCase().includes('‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢') ||
            title.toLowerCase().includes('‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏†‡∏±‡∏¢') ||
            title.toLowerCase().includes('‡∏ô‡πâ‡∏≥‡∏õ‡πà‡∏≤') ||
            title.toLowerCase().includes('‡∏ô‡πâ‡∏≥‡∏´‡∏•‡∏≤‡∏Å') ||
            title.toLowerCase().includes('‡∏ñ‡∏ô‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡∏î') ||
            title.toLowerCase().includes('‡∏™‡∏∞‡∏û‡∏≤‡∏ô') ||
            title.toLowerCase().includes('‡πÑ‡∏ü‡∏ü‡πâ‡∏≤') ||
            title.toLowerCase().includes('‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå') ||
            title.toLowerCase().includes('‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô') ||
            title.toLowerCase().includes('‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•') ||
            title.toLowerCase().includes('‡∏ï‡∏•‡∏≤‡∏î') ||
            title.toLowerCase().includes('‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô') ||
            title.toLowerCase().includes('‡∏ä‡∏∏‡∏°‡∏ä‡∏ô')
          )
        );
        
        if (isEmergencyReport) {
          articles.push({
            title,
            link,
            pubDate,
            description: title 
          });
        }
      }
    }
    
    return articles;
  } catch (error) {
    console.error('Google News RSS Error:', error.message);
    return [];
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢ AI - ‡πÄ‡∏ô‡πâ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå
async function analyzeDescriptionWithOllama(description) {
  const prompt = `‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå: "${description}"
  ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô:
  {
    "disasterType": "flood" ‡∏´‡∏£‡∏∑‡∏≠ "other",
    "location": "‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢" ‡∏´‡∏£‡∏∑‡∏≠ "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢",
    "severityLevel": "low" (‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢) ‡∏´‡∏£‡∏∑‡∏≠ "medium" (‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á) ‡∏´‡∏£‡∏∑‡∏≠ "high" (‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á),
    "severityReasoning": "‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á"
  }
  
  ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô:
  - low: ‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏†‡∏±‡∏¢
  - medium: ‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏†‡∏±‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢
  - high: ‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡∏°‡∏≤‡∏Å`;

  try {
    const response = await axios.post('http://localhost:11434/v1/chat/completions', {
      model: 'gemma3',
      messages: [
        { 
          role: 'system', 
          content: `‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°‡πÉ‡∏ô‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢ 
          ‡πÄ‡∏ô‡πâ‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏†‡∏±‡∏¢
          ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô` 
        },
        { role: 'user', content: prompt },
      ],
      temperature: 0.1,
      max_tokens: 250, 
    }, {
      timeout: 15000 
    });

    const data = response.data;
    const aiReply = data.choices?.[0]?.message?.content;

    const jsonMatch = aiReply.match(/```json([\s\S]*?)```/i);
    const jsonString = jsonMatch ? jsonMatch[1].trim() : aiReply.trim();

    return JSON.parse(jsonString);
  } catch (error) {
    console.error('Error calling Ollama API:', error);
    return null;
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°
async function scrapeDisasterData() {
  const searchQueries = [
    '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏ ‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏° ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢',
    '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå ‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏° ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢',
    '‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏†‡∏±‡∏¢ ‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏° ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢',
    '‡∏≠‡∏û‡∏¢‡∏û ‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏° ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢',
    '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏†‡∏±‡∏¢ ‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏° ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢',
    '‡∏ô‡πâ‡∏≥‡∏õ‡πà‡∏≤‡πÑ‡∏´‡∏•‡∏´‡∏•‡∏≤‡∏Å ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢',
    '‡∏ñ‡∏ô‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡∏î ‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏° ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢',
    '‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á ‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏° ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢'
  ];

  const results = [];
  const processedTitles = new Set(); 

  console.log('üö® ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Å‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°...');

  for (const query of searchQueries) {
    try {
      console.log(`üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: ${query}`);
      const articles = await searchGoogleNewsRSS(query);
      
      for (const article of articles) {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥
        if (processedTitles.has(article.title)) {
          continue;
        }
        processedTitles.add(article.title);
        
        console.log(`üìä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: ${article.title.substring(0, 50)}...`);
        const analysis = await analyzeDescriptionWithOllama(article.description);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°‡πÉ‡∏ô‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (analysis && analysis.disasterType === 'flood' && 
            analysis.location && analysis.location.toLowerCase().includes('‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢')) {
          
          const newReport = new DisasterReport({
            disasterType: 'flood',
            location: analysis.location || '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢',
            severityLevel: analysis.severityLevel || 'medium',
            severityReasoning: analysis.severityReasoning || '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°',
            description: `[‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå] ${article.description}`,
            source: article.link,
            locationCoordinates: { lat: 19.9061, lng: 99.8305 }, // ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢
            reportedAt: new Date(article.pubDate)
          });

          await newReport.save();
          await upsertDisasterReportsToVectorStore([newReport]);
          results.push(newReport);
          console.log(`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${article.title.substring(0, 30)}...`);
        }
      }
    } catch (error) {
      console.error(`‚ùå Error scraping for query "${query}":`, error);
    }
  }

  console.log(`üéØ ‡∏Å‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ${results.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
  return results;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏µ‡πà‡∏Å‡∏ß‡∏≤‡∏î‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß
async function getScrapedReports(filters = {}) {
  const query = {
    disasterType: { $regex: /‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°|flood/i },
    location: { $regex: /‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢|chiang rai/i }
  };
  
  if (filters.severityLevel) query.severityLevel = filters.severityLevel;

  return await DisasterReport.find(query)
    .sort({ createdAt: -1 })
    .limit(filters.limit || 50);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏Å‡πà‡∏≤
async function cleanupOldScrapedData(daysOld = 7) {
  const cutoffDate = new Date();
  cutoffDate.setDate(cutoffDate.getDate() - daysOld);
  
  return await DisasterReport.deleteMany({
    disasterType: { $regex: /‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°|flood/i },
    location: { $regex: /‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢|chiang rai/i },
    createdAt: { $lt: cutoffDate }
  });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥
async function checkDuplicateData(description) {
  const existingReport = await DisasterReport.findOne({
    description: description
  });
  
  return existingReport !== null;
}

module.exports = {
  scrapeDisasterData,
  getScrapedReports,
  cleanupOldScrapedData,
  checkDuplicateData,
  searchGoogleNewsRSS,
  analyzeDescriptionWithOllama
}; 