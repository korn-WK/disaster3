const { 
  scrapeDisasterData, 
  getScrapedReports, 
  cleanupOldScrapedData,
  checkDuplicateData,
  searchGoogleNewsRSS
} = require('../services/dataScrapingService');
const DisasterReport = require('../models/DisasterReport');

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google News RSS
const testGoogleNewsConnection = async () => {
  try {
    const testQuery = '‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏° ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢';
    const articles = await searchGoogleNewsRSS(testQuery);
    return articles.length > 0 ? 'active' : 'inactive';
  } catch (error) {
    console.error('Google News RSS connection test failed:', error);
    return 'inactive';
  }
};

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Å‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°
const startScraping = async (req, res) => {
  try {
    console.log('üö® ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Å‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢...');
    
    const results = await scrapeDisasterData();
    
    console.log(`‚úÖ ‡∏Å‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ${results.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    
    res.json({
      success: true,
      message: `‡∏Å‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ${results.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`,
      data: results
    });
  } catch (error) {
    console.error('‚ùå Error in startScraping:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏',
      error: error.message
    });
  }
};

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏µ‡πà‡∏Å‡∏ß‡∏≤‡∏î‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß
const getScrapedData = async (req, res) => {
  try {
    const { limit = 50, severityLevel } = req.query;
    const filters = { limit: parseInt(limit) };
    
    if (severityLevel) {
      filters.severityLevel = severityLevel;
    }
    
    const reports = await getScrapedReports(filters);
    
    res.json({
      success: true,
      data: reports
    });
  } catch (error) {
    console.error('Error getting scraped data:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏',
      error: error.message
    });
  }
};

// ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Å‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
const getScrapingStatus = async (req, res) => {
  try {
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google News RSS
    const googleApiStatus = await testGoogleNewsConnection();
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    const todayScrapedCount = await DisasterReport.countDocuments({
      disasterType: { $regex: /‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°|flood/i },
      location: { $regex: /‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢|chiang rai/i },
      createdAt: { $gte: today }
    });
    
    // ‡∏ô‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const totalScrapedCount = await DisasterReport.countDocuments({
      disasterType: { $regex: /‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°|flood/i },
      location: { $regex: /‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢|chiang rai/i }
    });
    
    res.json({
      success: true,
      data: {
        googleApi: googleApiStatus,
        todayScrapedCount,
        totalScrapedCount
      }
    });
  } catch (error) {
    console.error('Error getting scraping status:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Å‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
      error: error.message
    });
  }
};

// ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏Å‡πà‡∏≤
const cleanupData = async (req, res) => {
  try {
    const { daysOld = 7 } = req.body;
    
    const result = await cleanupOldScrapedData(daysOld);
    
    res.json({
      success: true,
      message: `‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß: ${result.deletedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`,
      deletedCount: result.deletedCount
    });
  } catch (error) {
    console.error('Error cleaning up data:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏',
      error: error.message
    });
  }
};

// ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
const deleteSelectedData = async (req, res) => {
  try {
    const { itemIds } = req.body;
    
    if (!itemIds || !Array.isArray(itemIds) || itemIds.length === 0) {
      return res.status(400).json({
        success: false,
        message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö'
      });
    }
    
    const result = await DisasterReport.deleteMany({
      _id: { $in: itemIds },
      disasterType: { $regex: /‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°|flood/i },
      location: { $regex: /‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢|chiang rai/i }
    });
    
    res.json({
      success: true,
      message: `‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß: ${result.deletedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`,
      deletedCount: result.deletedCount
    });
  } catch (error) {
    console.error('Error deleting selected data:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å',
      error: error.message
    });
  }
};

module.exports = {
  startScraping,
  getScrapedData,
  getScrapingStatus,
  cleanupData,
  deleteSelectedData
}; 
